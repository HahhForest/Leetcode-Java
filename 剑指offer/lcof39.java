package 剑指offer;

/*
剑指 Offer 39. 数组中出现次数超过一半的数字
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。
你可以假设数组是非空的，并且给定的数组总是存在多数元素。
 */
public class lcof39 {
}

/*
直观可使用哈希表，还有投票法，可以从几何上看出，将数组排序，数组中点的元素一定为此数

但这里使用摩尔投票法，核心理念为票数正负抵消，时空复杂度为O(N),O(1)
摩尔投票法：因为找的是个数超过一半总个数的数。因此若此数组中两两不相同的数相互抵消，就算最坏情况所有其他数都来抵消所求数，所求数也能剩到最后
步骤：从头到尾遍历。当总和为0时，指定当前指向数权重为+1，其他数为-1。向后遍历，当出现总和为0时，就重新指定数。遍历完后指向所求数
    本质为去掉抵消的数后，剩下的一定为所求数（前提有所求数存在，可以再来一个遍历进行检验）
 */
class Solution39 {
    public int majorityElement(int[] nums) {
        int sum = 0;
        int major = 0;
        for(int p = 0; p < nums.length; p++){
            // 出现和为0时，说明前面的全部抵消了
            if(sum == 0){
                major = nums[p];
            }
            // 投票
            sum += (nums[p] == major) ? 1 : -1;
        }
        return major;
    }
}
